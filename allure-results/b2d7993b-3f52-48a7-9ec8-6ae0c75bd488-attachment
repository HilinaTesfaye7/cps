# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: test
- Location: C:\Users\ENVY\Documents\cps Automation\tests\authorized\maximum_transfer_singleanddaily.spec.js:4:1

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('button', { name: 'Update Cap' })
    - locator resolved to <button type="submit" class="rizzui-button inline-flex font-medium items-center justify-center active:enabled:translate-y-px focus:outline-none focus-visible:ring-2 focus-visible:ring-opacity-50 transition-colors duration-200 py-2 text-sm h-10 rounded-md border border-transparent focus-visible:ring-offset-2 bg-primary hover:enabled:bg-primary-dark focus-visible:ring-primary/30 text-white px-6">Update Cap</button>
  - attempting click action
    2 Ã— waiting for element to be visible, enabled and stable
      - element is not stable
    - retrying click action
    - waiting 20ms
    - waiting for element to be visible, enabled and stable
    - element is not stable
  - retrying click action
    - waiting 100ms
    - waiting for element to be visible, enabled and stable
  - element was detached from the DOM, retrying

    at C:\Users\ENVY\Documents\cps Automation\tests\authorized\maximum_transfer_singleanddaily.spec.js:83:58
```

# Page snapshot

```yaml
- main:
  - heading "Dashen Bank Super App Central Dashboard Portal" [level=4]
  - text: B
  - paragraph: binim
  - text: MAKER
  - img
  - img
  - paragraph: Maximum Daily Cap
  - link "Back to Home"
  - img
  - textbox: transfer to dashen bank
  - button:
    - img
  - button:
    - img
  - table:
    - rowgroup:
      - row "Service ID Service Name Single Cap Daily Cap Create Date Action":
        - columnheader "Service ID"
        - columnheader "Service Name"
        - columnheader "Single Cap"
        - columnheader "Daily Cap"
        - columnheader "Create Date"
        - columnheader "Action"
    - rowgroup:
      - row "SFC-43464560949018279653 Transfer to Dashen Bank 100000 100000 Sat, Nov 30 2024":
        - cell "SFC-43464560949018279653":
          - paragraph: SFC-43464560949018279653
        - cell "Transfer to Dashen Bank":
          - paragraph: Transfer to Dashen Bank
        - cell "100000":
          - paragraph: "100000"
        - cell "100000":
          - paragraph: "100000"
        - cell "Sat, Nov 30 2024":
          - paragraph: Sat, Nov 30 2024
        - cell:
          - img
  - text: "Rows per page:"
  - button "10":
    - text: "10"
    - img
  - list:
    - listitem "Previous Page":
      - img
    - listitem "1"
    - listitem "Next Page":
      - img
- region "Notifications alt+T"
- alert
```

# Test source

```ts
   1 |
   2 | const { test, expect } = require('@playwright/test');
   3 |
   4 | test('test', async ({ page }) => {
   5 |   // Variable to store the OTP
   6 |   let otp = null;
   7 |
   8 |   // Listen for network responses
   9 |   page.on('response', async (response) => {
  10 |     const url = response.url(); // Get the URL of the response
  11 |
  12 |     // Check if the response URL matches the specific endpoint
  13 |     if (url.includes('https://sau.eaglelionsystems.com/v1.0/chatbirrapi/cpsauth/otp/request/dashops')) {
  14 |       console.log(`Response URL: ${url}`);
  15 |
  16 |       // Get the response body as JSON
  17 |       try {
  18 |         const responseBody = await response.json(); // Parse the response body as JSON
  19 |         console.log('Response Body:', responseBody);
  20 |
  21 |         // Extract the OTP from the response body
  22 |         if (responseBody.otpcode) {
  23 |           otp = responseBody.otpcode; // Assuming the OTP is in a field named "otpcode"
  24 |           console.log(`OTP: ${otp}`);
  25 |         } else {
  26 |           console.error('OTP not found in the response body.');
  27 |         }
  28 |       } catch (error) {
  29 |         console.error('Failed to parse response body as JSON:', error);
  30 |       }
  31 |     }
  32 |   });
  33 |
  34 |   // Navigate to the login page
  35 |   await page.goto('https://sau-dbsa.vercel.app');
  36 |
  37 |   // Enter the username and request OTP
  38 |   await page.getByPlaceholder('Enter Your username').click();
  39 |   await page.getByPlaceholder('Enter Your username').fill('binim');
  40 |   await page.getByRole('button', { name: 'Get OTP' }).click();
  41 |
  42 |   // Wait for the OTP to be captured (adjust timeout as needed)
  43 |   await page.waitForTimeout(5000); // Wait for 5 seconds
  44 |
  45 |   // Check if the OTP was captured
  46 |   if (!otp) {
  47 |     throw new Error('user not found');
  48 |   }
  49 |
  50 |   // Split the OTP into individual digits
  51 |   const otpDigits = otp.split('');
  52 |   if (otpDigits.length !== 6) {
  53 |     throw new Error('OTP must be 6 digits long.');
  54 |   }
  55 |
  56 |   // Fill the OTP into the input boxes
  57 |   for (let i = 0; i < 6; i++) {
  58 |     const inputSelector = `.rizzui-pin-code-field:nth-child(${i + 1})`;
  59 |     await page.locator(inputSelector).fill(otpDigits[i]);
  60 |   }
  61 |
  62 |   // Click the "Next" button
  63 |   await page.getByRole('button', { name: 'Next' }).click();
  64 |
  65 |   // Enter the password and sign in
  66 |   await page.getByPlaceholder('Enter Your Password').click();
  67 |   await page.getByPlaceholder('Enter Your Password').fill('Admin@7');
  68 |   await page.getByRole('button', { name: 'Sign In' }).click();
  69 |
  70 |   await page.getByRole('link', { name: 'Rule Engine Rule Engine' }).click();
  71 |   await page.getByRole('link', { name: 'Minimum Transfer Amount' }).click();
  72 |   await page.getByText('Minimum Transfer AmountBack').click();
  73 |   await page.locator('header').getByRole('img').click();
  74 |   await page.locator('div').filter({ hasText: /^Maximum Transfer CapsSet maximum transfer limits for all transactions\.$/ }).nth(1).click();
  75 |   await page.getByRole('link', { name: 'icon Single & Daily Cap' }).click();
  76 |   await page.getByPlaceholder('search by service name....').click();
  77 |   await page.getByPlaceholder('search by service name....').fill('transfer to dashen bank');
  78 |   await page.getByRole('button').nth(1).click();
  79 |   await page.getByRole('row', { name: 'SFC-43464560949018279653' }).getByRole('img').click();
  80 |   await page.getByPlaceholder('Daily transfer limit').click();
  81 |   await page.getByPlaceholder('Daily transfer limit').fill('10000000');
  82 |   await page.getByRole('button', { name: 'Update Cap' }).click();
> 83 |   await page.getByRole('button', { name: 'Update Cap' }).click();
     |                                                          ^ Error: locator.click: Test timeout of 30000ms exceeded.
  84 |   await page.waitForTimeout(5000);
  85 | });
```